import json
import logging
import os
import tempfile
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
import asyncio

logging.basicConfig(level=logging.DEBUG)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
from config import TOKEN
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —á–∞—Å—Ç–µ–π
def parse_text_parts(text_parts):
    return ''.join([part['t'] for part in text_parts])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
def decode_matching_question(data):
    pairs = []
    ms_data = data.get('c', {}).get('ms', {}).get('b', {})
    order = data.get('c', {}).get('ms', {}).get('o', [])

    for key in order:
        if key in ms_data:
            pair_data = ms_data[key]
            left_text = parse_text_parts(pair_data['l']['t']['b']['B'][list(pair_data['l']['t']['b']['B'].keys())[0]]['c'])
            right_text = parse_text_parts(pair_data['r']['t']['b']['B'][list(pair_data['r']['t']['b']['B'].keys())[0]]['c'])
            pairs.append((left_text, right_text))
    
    return pairs

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
def decode_questions(json_data):
    questions = []
    question_types = {
        'mt': 'Matching',         # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        'mc': 'Multiple Choice',  # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
        'ti': 'Text Input',       # –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
        'sq': 'Sequencing',       # Sequencing
        'mr': 'Multiple Response' # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    }

    for qid, qdata in json_data['state'].get('q', {}).get('B', {}).items():
        question = {}
        question['id'] = qid
        question['type'] = question_types.get(qdata.get('t'), 'Unknown')  # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
        question_text_parts = qdata.get('d', {}).get('b', {}).get('B', {})
        if question_text_parts:
            question['text'] = parse_text_parts(question_text_parts[list(question_text_parts.keys())[0]]['c'])
        else:
            question['text'] = '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞'

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞
        question['answers'] = []

        if question['type'] == 'Matching':
            pairs = decode_matching_question(qdata)
            question['answers'] = [f"{left} -> {right}" for left, right in pairs]

        elif question['type'] == 'Sequencing':
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            sequence_order = qdata.get('c', {}).get('o', [])
            if not sequence_order:
                sequence_order = sorted(qdata.get('c', {}).get('B', {}).keys())

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ –∫–ª—é—á–∞–º
            for key in sequence_order:
                answer_data = qdata.get('c', {}).get('B', {}).get(key, {})
                answer_text_parts = answer_data.get('t', {}).get('b', {}).get('B', {})
                if answer_text_parts:
                    answer_text = parse_text_parts(answer_text_parts[list(answer_text_parts.keys())[0]]['c'])
                else:
                    answer_text = '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞'
                question['answers'].append({
                    'text': answer_text,
                    'order': len(question['answers']) + 1  # –ù—É–º–µ—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                })

        else:
            for aid, adata in qdata.get('c', {}).get('B', {}).items():
                answer_text_parts = adata.get('t', {}).get('b', {}).get('B', {})
                if answer_text_parts:
                    answer_text = parse_text_parts(answer_text_parts[list(answer_text_parts.keys())[0]]['c'])
                else:
                    answer_text = '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞'
                
                answer = {
                    'text': answer_text,
                    'correct': adata.get('c', False)  # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                }
                question['answers'].append(answer)

        questions.append(question)

    return questions

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Å—Ç—è–º–∏
async def send_message_in_parts(chat_id, text, max_length=4096):
    if len(text) <= max_length:
        await bot.send_message(chat_id, text, parse_mode=ParseMode.HTML)
    else:
        parts = [text[i:i+max_length] for i in range(0, len(text), max_length)]
        for part in parts:
            await bot.send_message(chat_id, part, parse_mode=ParseMode.HTML)

import html

def format_questions(questions):
    emoji_numbers = {
        1: "1Ô∏è‚É£", 2: "2Ô∏è‚É£", 3: "3Ô∏è‚É£", 4: "4Ô∏è‚É£", 5: "5Ô∏è‚É£",
        6: "6Ô∏è‚É£", 7: "7Ô∏è‚É£", 8: "8Ô∏è‚É£", 9: "9Ô∏è‚É£", 10: "üîü",
        11: "1Ô∏è‚É£1Ô∏è‚É£", 12: "1Ô∏è‚É£2Ô∏è‚É£", 13: "1Ô∏è‚É£3Ô∏è‚É£", 14: "1Ô∏è‚É£4Ô∏è‚É£", 15: "1Ô∏è‚É£5Ô∏è‚É£",
        16: "1Ô∏è‚É£6Ô∏è‚É£", 17: "1Ô∏è‚É£7Ô∏è‚É£", 18: "1Ô∏è‚É£8Ô∏è‚É£", 19: "1Ô∏è‚É£9Ô∏è‚É£", 20: "2Ô∏è‚É£0Ô∏è‚É£"
    }

    formatted = ""
    for question in questions:
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
        question_text = html.escape(question['text'])
        formatted += f"<b>–í–æ–ø—Ä–æ—Å:</b> {question_text}\n–¢–∏–ø: {question['type']}\n<b>–û—Ç–≤–µ—Ç—ã:</b>\n"
        
        if question['type'] == 'Matching':
            for pair in question['answers']:
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–∞—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
                formatted += f"üîó {html.escape(pair)}\n"
        elif question['type'] == 'Sequencing':
            for answer in sorted(question['answers'], key=lambda x: x['order']):
                number_emoji = emoji_numbers.get(answer['order'], f"{answer['order']}Ô∏è‚É£")
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
                formatted += f"{number_emoji} {html.escape(answer['text'])}\n"
        else:
            for answer in question['answers']:
                correct_marker = "‚úÖ" if answer['correct'] else "‚ùå"
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
                formatted += f"{correct_marker} {html.escape(answer['text'])}\n"
        formatted += "\n"

    return formatted


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã start
@dp.message(Command(commands=["start"]))
async def start_handler(message: types.Message):
    russian_message = await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üåü\n\n"
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –∫ –±–æ—Ç—É –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ —Ç–µ—Å—Ç–∞ SCORM! –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å. –î–ª—è –Ω–∞—á–∞–ª–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ JSON —Ñ–∞–π–ª —Å —Ç–µ—Å—Ç–æ–º. –ï—Å–ª–∏ —É –≤–∞—Å –∞—Ä—Ö–∏–≤ ZIP, –Ω–∞–º –ø–æ–∫–∞ –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª data-1.json –∏–∑ –ø–∞–ø–∫–∏ res. üìÇ\n\n"
        "–í–æ—Ç —à–∞–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:\n"
        "1Ô∏è‚É£ –°–∫–∞—á–∞–π—Ç–µ SCORM 1.2 –∏–ª–∏ 2004.\n"
        "2Ô∏è‚É£ –†–∞—Å–ø–∞–∫—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π ZIP –∞—Ä—Ö–∏–≤.\n"
        "3Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –ø–∞–ø–∫—É –∏ –Ω–∞–π–¥–∏—Ç–µ –ø–∞–ø–∫—É res.\n"
        "4Ô∏è‚É£ –í–Ω—É—Ç—Ä–∏ res –Ω–∞–π–¥–∏—Ç–µ —Ñ–∞–π–ª data-1.json (–Ω–µ –∑–∞–±—É–¥—å—Ç–µ, —á—Ç–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .json –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –≤–∏–¥–Ω–æ –≤ –ø—Ä–æ—Å—Ç–æ–º –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞).\n"
        "5Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –º–Ω–µ, –∏ —è —Å–¥–µ–ª–∞—é –≤—Å—é —Ä–∞–±–æ—Ç—É –ø–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ –¥–ª—è –≤–∞—Å! ü§ñ\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å. –£–¥–∞—á–∏! üí™"
    )
    english_message = await message.answer(
        "Hello! üåü\n\n"
        "Thank you for reaching out to the bot for decrypting the SCORM test! I'm ready to help. To start, please send me a JSON file with the test. If you have a ZIP archive, for now we only need the data-1.json file from the res folder. üìÇ\n\n"
        "Here are the steps to follow:\n"
        "1Ô∏è‚É£ Download SCORM 1.2 or 2004.\n"
        "2Ô∏è‚É£ Unpack the received ZIP archive.\n"
        "3Ô∏è‚É£ Open the folder and find the res folder.\n"
        "4Ô∏è‚É£ Inside res, find the data-1.json file (remember that the .json extension may not be visible in the simple file name).\n"
        "5Ô∏è‚É£ Send me this file, and I will do all the decryption work for you! ü§ñ\n\n"
        "If you have any questions or need help, feel free to ask. Good luck! üí™"
    )
    await asyncio.sleep(60)
    await russian_message.delete()
    await english_message.delete()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON —Ñ–∞–π–ª–∞
@dp.message(lambda message: message.document and message.document.file_name.endswith('.json'))
async def file_handler(message: types.Message, state: FSMContext):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        file_info = await bot.get_file(message.document.file_id)
        file_data = await bot.download_file(file_info.file_path)
        
        temp_file_path = tempfile.mktemp()
        with open(temp_file_path, 'wb') as temp_file:
            temp_file.write(file_data.read())

        logging.debug(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ: {temp_file_path}")

        # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ JSON —Ñ–∞–π–ª–∞
        with open(temp_file_path, 'r', encoding='utf-8') as f:
            json_data = json.load(f)
        logging.debug("JSON —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")

        questions = decode_questions(json_data)
        logging.debug("–ù–∞—á–∞–ª–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤")

        formatted_questions = format_questions(questions)
        logging.debug("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤")

        await send_message_in_parts(message.chat.id, formatted_questions, max_length=4096)
        logging.info("–í–æ–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        os.remove(temp_file_path)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")

# –ó–∞–ø—É—Å–∫ polling
if __name__ == "__main__":
    dp.run_polling(bot)
